"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _EnergyBillV1MeterDetail_instances, _EnergyBillV1MeterDetail_printableValues;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EnergyBillV1MeterDetail = void 0;
/**
 * Information about the energy meter.
 */
class EnergyBillV1MeterDetail {
    constructor({ prediction = {} }) {
        _EnergyBillV1MeterDetail_instances.add(this);
        /** Confidence score */
        this.confidence = 0.0;
        /**
         * Contains the relative vertices coordinates (points) of a polygon containing
         * the field in the document.
         */
        this.polygon = [];
        this.meterNumber = prediction["meter_number"];
        this.meterType = prediction["meter_type"];
        this.unit = prediction["unit"];
        this.pageId = prediction["page_id"];
        this.confidence = prediction["confidence"] ? prediction.confidence : 0.0;
        if (prediction["polygon"]) {
            this.polygon = prediction.polygon;
        }
    }
    /**
     * Default string representation.
     */
    toString() {
        const printable = __classPrivateFieldGet(this, _EnergyBillV1MeterDetail_instances, "m", _EnergyBillV1MeterDetail_printableValues).call(this);
        return ("Meter Number: " +
            printable.meterNumber +
            ", Meter Type: " +
            printable.meterType +
            ", Unit of Measure: " +
            printable.unit);
    }
    /**
     * Output in a format suitable for inclusion in a field list.
     */
    toFieldList() {
        const printable = __classPrivateFieldGet(this, _EnergyBillV1MeterDetail_instances, "m", _EnergyBillV1MeterDetail_printableValues).call(this);
        return `
  :Meter Number: ${printable.meterNumber}
  :Meter Type: ${printable.meterType}
  :Unit of Measure: ${printable.unit}`.trimEnd();
    }
}
exports.EnergyBillV1MeterDetail = EnergyBillV1MeterDetail;
_EnergyBillV1MeterDetail_instances = new WeakSet(), _EnergyBillV1MeterDetail_printableValues = function _EnergyBillV1MeterDetail_printableValues() {
    return {
        meterNumber: this.meterNumber ?? "",
        meterType: this.meterType ?? "",
        unit: this.unit ?? "",
    };
};
